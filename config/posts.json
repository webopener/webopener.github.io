{
  "posts": [
    {
      "content": "# ES6、ES7、ES8、ES9、ES10新特性一览\r\n\r\n## ES6新特性（2015）\r\n\r\nES6的特性比较多，在 ES5 发布近 6 年（2009-11 至 2015-6）之后才将其标准化。两个发布版本之间时间跨度很大，所以ES6中的特性比较多。 在这里列举几个常用的：\r\n\r\n·   类\r\n\r\n·   模块化\r\n\r\n·   箭头函数\r\n\r\n· 函数参数默认值\r\n\r\n·   模板字符串\r\n\r\n·   解构赋值\r\n\r\n·   延展操作符\r\n\r\n·   对象属性简写\r\n\r\n·   Promise\r\n\r\n·   Let与Const\r\n\r\n### 1.类（class）\r\n\r\n对熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6 引入了class（类），让JavaScript的面向对象编程变得更加简单和易于理解。\r\n\r\n```\r\n  class Animal {\r\n    // 构造函数，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.\r\n    constructor(name,color) {\r\n      this.name = name;\r\n      this.color = color;\r\n    }\r\n    // toString 是原型对象上的属性\r\n    toString() {\r\n      console.log('name:' + this.name + ',color:' + this.color);\r\n    }\r\n  }\r\n \r\n var animal = new Animal('dog','white');//实例化Animal\r\n animal.toString();\r\n \r\n console.log(animal.hasOwnProperty('name')); //true\r\n console.log(animal.hasOwnProperty('toString')); // false\r\n console.log(animal.__proto__.hasOwnProperty('toString')); // true\r\n \r\n class Cat extends Animal {\r\n  constructor(action) {\r\n    // 子类必须要在constructor中指定super 函数，否则在新建实例的时候会报错.\r\n    // 如果没有置顶consructor,默认带super函数的constructor将会被添加、\r\n    super('cat','white');\r\n    this.action = action;\r\n  }\r\n  toString() {\r\n    console.log(super.toString());\r\n  }\r\n }\r\n \r\n var cat = new Cat('catch')\r\n cat.toString();\r\n \r\n // 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。\r\n console.log(cat instanceof Cat); // true\r\n console.log(cat instanceof Animal); // true\r\n \r\n```\r\n\r\n### 2.模块化(Module)\r\n\r\nES5不支持原生的模块化，在ES6中模块作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过import来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。\r\n\r\n#### 导出(export)\r\n\r\nES6允许在一个模块中使用export来导出多个变量或函数。\r\n\r\n**导出变量**\r\n\r\n```\r\n//test.js\r\nexport var name = 'Rainbow'\r\n```\r\n\r\n心得：ES6不仅支持变量的导出，也支持常量的导出。 \r\n\r\n```\r\nexport const sqrt = Math.sqrt;//``导出常量\r\n```\r\n\r\nES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。\r\n\r\n```\r\n //test.js\r\n var name = 'Rainbow';\r\n var age = '24';\r\n export {name, age};\r\n \r\n```\r\n\r\n**导出函数**\r\n\r\n```\r\n// myModule.js\r\nexport function myModule(someArg) {\r\n  return someArg;\r\n}  \r\n \r\n```\r\n\r\n#### 导入(import)\r\n\r\n定义好模块的输出以后就可以在另外一个模块通过import引用。\r\n\r\n```\r\nimport {myModule} from 'myModule';// main.js\r\nimport {name,age} from 'test';// test.js\r\n \r\n```\r\n\r\n心得:一条import 语句可以同时导入默认函数和其它变量。\r\n\r\n```\r\nimport defaultMethod, { otherMethod } from 'xxx.js';\r\n```\r\n\r\n### 3.箭头（Arrow）函数\r\n\r\n这是ES6中最令人激动的特性之一。`=>`不只是关键字function的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个`this`,能帮你很好的解决this的指向问题。有经验的JavaScript开发者都熟悉诸如`var self = this;`或`var that = this`这种引用外围this的模式。但借助`=>`，就不需要这种模式了。\r\n\r\n#### 箭头函数的结构\r\n\r\n箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。\r\n\r\n```\r\n// 箭头函数的例子\r\n()=>1\r\nv=>v+1\r\n(a,b)=>a+b\r\n()=>{\r\n    alert(\"foo\");\r\n}\r\ne=>{\r\n    if (e == 0){\r\n        return 0;\r\n    }\r\n    return 1000/e;\r\n}\r\n \r\n```\r\n\r\n心得：不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。\r\n\r\n#### 卸载监听器时的陷阱\r\n\r\n**错误的做法**\r\n\r\n```\r\nclass PauseMenu extends React.Component{\r\n    componentWillMount(){\r\n        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));\r\n    }\r\n    componentWillUnmount(){\r\n        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));\r\n    }\r\n    onAppPaused(event){\r\n    }\r\n}\r\n \r\n```\r\n\r\n**正确的做法**\r\n\r\n```\r\nclass PauseMenu extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this._onAppPaused = this.onAppPaused.bind(this);\r\n    }\r\n    componentWillMount(){\r\n        AppStateIOS.addEventListener('change', this._onAppPaused);\r\n    }\r\n    componentWillUnmount(){\r\n        AppStateIOS.removeEventListener('change', this._onAppPaused);\r\n    }\r\n    onAppPaused(event){\r\n    }\r\n}\r\n \r\n```\r\n\r\n除上述的做法外，我们还可以这样做：\r\n\r\n```\r\nclass PauseMenu extends React.Component{\r\n    componentWillMount(){\r\n        AppStateIOS.addEventListener('change', this.onAppPaused);\r\n    }\r\n    componentWillUnmount(){\r\n        AppStateIOS.removeEventListener('change', this.onAppPaused);\r\n    }\r\n    onAppPaused = (event) => {\r\n        //把函数直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针\r\n    }\r\n}\r\n \r\n```\r\n\r\n需要注意的是：不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。\r\n\r\n### 4.[函数参数默认值](https://link.juejin.im/?target=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/default_parameters)\r\n\r\nES6支持在定义函数的时候为其设置默认值：\r\n\r\n```\r\nfunction foo(height = 50, color = 'red'){\r\n    // ...\r\n}\r\n \r\n```\r\n\r\n不使用默认值：\r\n\r\n```\r\nfunction foo(height, color){\r\n    var height = height || 50;\r\n    var color = color || 'red';\r\n    //...\r\n}\r\n \r\n```\r\n\r\n这样写一般没问题，但当`参数的布尔值为false`时，就会有问题了。比如，我们这样调用foo函数：\r\n\r\n```\r\nfoo(0, \"\")\r\n \r\n```\r\n\r\n因为`0``的布尔值为false`，这样height的取值将是50。同理color的取值为‘red’。\r\n\r\n所以说，`函数参数默认值`不仅能是代码变得更加简洁而且能规避一些问题。\r\n\r\n### 5.模板字符串\r\n\r\nES6支持`模板字符串`，使得字符串的拼接更加的简洁、直观。\r\n\r\n不使用模板字符串：\r\n\r\n```\r\nvar name = 'Your name is ' + first + ' ' + last + '.'\r\n \r\n```\r\n\r\n使用模板字符串：\r\n\r\n```\r\nvar name = `Your name is ${first} ${last}.`\r\n \r\n```\r\n\r\n在ES6中通过`${}`就可以完成字符串的拼接，只需要将变量放在大括号之中。\r\n\r\n### 6.[解构赋值](https://link.juejin.im/?target=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\r\n\r\n解构赋值语法是JavaScript的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量。\r\n\r\n#### 获取数组中的值\r\n\r\n从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应。\r\n\r\n```\r\nvar foo = [\"one\", \"two\", \"three\", \"four\"];\r\nvar [one, two, three] = foo;\r\nconsole.log(one); // \"one\"\r\nconsole.log(two); // \"two\"\r\nconsole.log(three); // \"three\"\r\n//如果你要忽略某些值，你可以按照下面的写法获取你想要的值\r\nvar [first, , , last] = foo;\r\nconsole.log(first); // \"one\"\r\nconsole.log(last); // \"four\"\r\n//你也可以这样写\r\nvar a, b; //先声明变量\r\n \r\n[a, b] = [1, 2];\r\nconsole.log(a); // 1\r\nconsole.log(b); // 2\r\n \r\n```\r\n\r\n如果没有从数组中的获取到值，你可以为变量设置一个默认值。\r\n\r\n```\r\nvar a, b;\r\n \r\n[a=5, b=7] = [1];\r\nconsole.log(a); // 1\r\nconsole.log(b); // 7\r\n \r\n```\r\n\r\n通过解构赋值可以方便的交换两个变量的值。\r\n\r\n```\r\nvar a = 1;var b = 3;\r\n \r\n[a, b] = [b, a];\r\nconsole.log(a); // 3\r\nconsole.log(b); // 1\r\n \r\n \r\n```\r\n\r\n#### 获取对象中的值\r\n\r\n```\r\nconst student = {\r\n  name:'Ming',\r\n  age:'18',\r\n  city:'Shanghai'  \r\n};\r\nconst {name,age,city} = student;\r\nconsole.log(name); // \"Ming\"\r\nconsole.log(age); // \"18\"\r\nconsole.log(city); // \"Shanghai\"\r\n \r\n```\r\n\r\n### 7.延展操作符(Spread operator)\r\n\r\n`延展操作符...`可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造对象时, 将对象表达式按key-value的方式展开。\r\n\r\n#### 语法\r\n\r\n函数调用：\r\n\r\n```\r\nmyFunction(...iterableObj);\r\n \r\n```\r\n\r\n数组构造或字符串：\r\n\r\n```\r\n[...iterableObj, '4', ...'hello', 6];\r\n \r\n```\r\n\r\n构造对象时,进行克隆或者属性拷贝（ECMAScript 2018规范新增特性）：\r\n\r\n```\r\nlet objClone = { ...obj };\r\n \r\n```\r\n\r\n#### 应用场景\r\n\r\n在函数调用时使用延展操作符\r\n\r\n```\r\nfunction sum(x, y, z) {\r\n  return x + y + z;\r\n}const numbers = [1, 2, 3];\r\n//不使用延展操作符\r\nconsole.log(sum.apply(null, numbers));\r\n//使用延展操作符\r\nconsole.log(sum(...numbers));// 6\r\n \r\n```\r\n\r\n构造数组\r\n\r\n没有展开语法的时候，只能组合使用 push，splice，concat 等方法，来将已有数组元素变成新数组的一部分。有了展开语法, 构造新数组会变得更简单、更优雅：\r\n\r\n```\r\nconst stuendts = ['Jine','Tom']; \r\nconst persons = ['Tony',... stuendts,'Aaron','Anna'];\r\nconslog.log(persions)// [\"Tony\", \"Jine\", \"Tom\", \"Aaron\", \"Anna\"]\r\n \r\n```\r\n\r\n和参数列表的展开类似, `...` 在构造字数组时, 可以在任意位置多次使用。\r\n\r\n数组拷贝\r\n\r\n```\r\nvar arr = [1, 2, 3];\r\nvar arr2 = [...arr]; // 等同于 arr.slice()\r\narr2.push(4); \r\nconsole.log(arr2)//[1, 2, 3, 4]\r\n \r\n```\r\n\r\n展开语法和 Object.assign() 行为一致, 执行的都是浅拷贝(只遍历一层)。\r\n\r\n连接多个数组\r\n\r\n```\r\nvar arr1 = [0, 1, 2];\r\nvar arr2 = [3, 4, 5];\r\nvar arr3 = [...arr1, ...arr2];\r\n// 将 arr2 中所有元素附加到 arr1 后面并返回//等同于\r\nvar arr4 = arr1.concat(arr2);\r\n \r\n```\r\n\r\n#### 在ECMAScript 2018中延展操作符增加了对对象的支持\r\n\r\n```\r\nvar obj1 = { foo: 'bar', x: 42 };\r\nvar obj2 = { foo: 'baz', y: 13 };\r\nvar clonedObj = { ...obj1 };// 克隆后的对象: { foo: \"bar\", x: 42 }\r\nvar mergedObj = { ...obj1, ...obj2 };// 合并后的对象: { foo: \"baz\", x: 42, y: 13 }\r\n \r\n```\r\n\r\n#### 在React中的应用\r\n\r\n通常我们在封装一个组件时，会对外公开一些 props 用于实现功能。大部分情况下在外部使用都应显示的传递 props 。但是当传递大量的props时，会非常繁琐，这时我们可以使用 `...(``延展操作符,用于取出参数对象的所有可遍历属性)` 来进行传递。\r\n\r\n#### 一般情况下我们应该这样写\r\n\r\n```\r\n<CustomComponent name ='Jine' age ={21} />\r\n \r\n```\r\n\r\n使用 ... ，等同于上面的写法\r\n\r\n```\r\nconst params = {\r\n        name: 'Jine',\r\n        age: 21\r\n}\r\n<CustomComponent {...params} />\r\n```\r\n\r\n配合解构赋值避免传入一些不需要的参数\r\n\r\n```\r\nvar params = {\r\n        name: '123',\r\n        title: '456',\r\n        type: 'aaa'\r\n}\r\nvar { type, ...other } = params;\r\n \r\n<CustomComponent type='normal' number={2} {...other} />\r\n//等同于\r\n<CustomComponent type='normal' number={2} name='123' title='456' />\r\n \r\n```\r\n\r\n### 8.对象属性简写\r\n\r\n在ES6中允许我们在设置一个对象的属性的时候不指定属性名。\r\n\r\n不使用ES6\r\n\r\n```\r\nconst name='Ming',age='18',city='Shanghai';\r\n   const student = {\r\n    name:name,\r\n    age:age,\r\n    city:city\r\n};\r\nconsole.log(student);//{name: \"Ming\", age: \"18\", city: \"Shanghai\"}\r\n \r\n```\r\n\r\n对象中必须包含属性和值，显得非常冗余。\r\n\r\n使用ES6\r\n\r\n```\r\nconst name='Ming',age='18',city='Shanghai';\r\n  const student = {\r\n    name,\r\n    age,\r\n    city\r\n};\r\nconsole.log(student);//{name: \"Ming\", age: \"18\", city: \"Shanghai\"}\r\n \r\n```\r\n\r\n对象中直接写变量，非常简洁。\r\n\r\n### 9.[Promise](https://link.juejin.im/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\r\n\r\nPromise 是异步编程的一种解决方案，比传统的解决方案callback更加的优雅。它最早由社区提出和实现的，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。\r\n\r\n不使用ES6\r\n\r\n嵌套两个setTimeout回调函数：\r\n\r\n```\r\nsetTimeout(function(){\r\n    console.log('Hello'); // 1秒后输出\"Hello\"\r\n    setTimeout(function()\r\n    {\r\n        console.log('Hi'); // 2秒后输出\"Hi\"\r\n    }, 1000);\r\n}, 1000);\r\n \r\n```\r\n\r\n使用ES6\r\n\r\n```\r\nvar waitSecond = new Promise(function(resolve, reject){\r\n    setTimeout(resolve, 1000);\r\n});\r\n \r\nwaitSecond\r\n    .then(function()\r\n    {\r\n      console.log(\"Hello\"); // 1秒后输出\"Hello\"\r\n      return waitSecond;\r\n    })\r\n    .then(function()\r\n    {\r\n        console.log(\"Hi\"); // 2秒后输出\"Hi\"\r\n    });\r\n \r\n```\r\n\r\n上面的的代码使用两个then来进行异步编程串行化，避免了回调地狱：\r\n\r\n### 10.支持let与const\r\n\r\n在之前JS是没有块级作用域的，const与let填补了这方便的空白，const与let都是块级作用域。\r\n\r\n使用var定义的变量为函数级作用域：\r\n\r\n```\r\n{\r\n  var a = 10;\r\n}\r\nconsole.log(a); // 输出10\r\n \r\n```\r\n\r\n使用let与const定义的变量为块级作用域：\r\n\r\n```\r\n{\r\n  let a = 10;\r\n}\r\nconsole.log(a); //-1 or Error“ReferenceError: a is not defined”\r\n```\r\n\r\n## ES7新特性（2016）\r\n\r\nES2016添加了两个小的特性来说明标准化过程：\r\n\r\n·   数组includes()方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回true，否则返回false。\r\n\r\n·   a ** b指数运算符，它与 Math.pow(a, b)相同。\r\n\r\n### 1.Array.prototype.includes()\r\n\r\n`includes()` 函数用来判断一个数组是否包含一个指定的值，如果包含则返回 `true`，否则返回`false`。\r\n\r\n`includes` 函数与 `indexOf` 函数很相似，下面两个表达式是等价的：\r\n\r\n```\r\narr.includes(x)\r\narr.indexOf(x) >= 0\r\n \r\n```\r\n\r\n接下来我们来判断数字中是否包含某个元素：\r\n\r\n在ES7之前的做法\r\n\r\n使用`indexOf()`验证数组中是否存在某个元素，这时需要根据返回值是否为-1来判断：\r\n\r\n```\r\nlet arr = ['react', 'angular', 'vue'];\r\nif (arr.indexOf('react') !== -1)\r\n{\r\n    console.log('react存在');\r\n}\r\n \r\n```\r\n\r\n使用ES7的includes()\r\n\r\n使用includes()验证数组中是否存在某个元素，这样更加直观简单：\r\n\r\n```\r\nlet arr = ['react', 'angular', 'vue'];\r\nif (arr.includes('react'))\r\n{\r\n    console.log('react存在');\r\n}\r\n```\r\n\r\n### 2.指数操作符\r\n\r\n在ES7中引入了指数运算符`**`，`**`具有与`Math.pow(..)`等效的计算结果。\r\n\r\n不使用指数操作符\r\n\r\n使用自定义的递归函数calculateExponent或者Math.pow()进行指数运算：\r\n\r\n```\r\nfunction calculateExponent(base, exponent){\r\n    if (exponent === 1)\r\n    {\r\n        return base;\r\n    }\r\n    else\r\n    {\r\n        return base * calculateExponent(base, exponent - 1);\r\n    }\r\n}\r\nconsole.log(calculateExponent(2, 10)); // 输出1024console.log(Math.pow(2, 10)); // 输出1024\r\n```\r\n\r\n使用指数操作符\r\n\r\n使用指数运算符**，就像+、-等操作符一样：\r\n\r\n```\r\nconsole.log(2**10);// 输出1024\r\n```\r\n\r\n## ES8新特性（2017）\r\n\r\n·   async/await\r\n\r\n·   Object.values()\r\n\r\n·   Object.entries()\r\n\r\n·   String padding: padStart()和padEnd()，填充字符串达到当前长度\r\n\r\n·   函数参数列表结尾允许逗号\r\n\r\n·   Object.getOwnPropertyDescriptors()\r\n\r\n·   ShareArrayBuffer和Atomics对象，用于从共享内存位置读取和写入\r\n\r\n### 1.async/await\r\n\r\nES2018引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了`next()`方法返回一个Promise。因此`await`可以和`for...of`循环一起使用，以串行的方式运行异步操作。例如：\r\n\r\n```\r\nasync function process(array) {\r\n  for await (let i of array) {\r\n    doSomething(i);\r\n  }\r\n}\r\n```\r\n\r\n### 2.Object.values()\r\n\r\n`Object.values()`是一个与`Object.keys()`类似的新函数，但返回的是Object自身属性的所有值，不包括继承的值。\r\n\r\n假设我们要遍历如下对象`obj`的所有值：\r\n\r\n```\r\nconst obj = {a: 1, b: 2, c: 3};\r\n```\r\n\r\n不使用Object.values() :ES7\r\n\r\n```\r\nconst vals=Object.keys(obj).map(key=>obj[key]);\r\nconsole.log(vals);//[1, 2, 3]\r\n```\r\n\r\n使用Object.values() :ES8\r\n\r\n```\r\nconst values=Object.values(obj1);\r\nconsole.log(values);//[1, 2, 3]\r\n```\r\n\r\n从上述代码中可以看出`Object.values()`为我们省去了遍历key，并根据这些key获取value的步骤。\r\n\r\n### 3.Object.entries()\r\n\r\n`Object.entries()`函数返回一个给定对象自身可枚举属性的键值对的数组。\r\n\r\n接下来我们来遍历上文中的`obj`对象的所有属性的key和value：\r\n\r\n不使用Object.entries() :ES7\r\n\r\n```\r\nObject.keys(obj).forEach(key=>{\r\n        console.log('key:'+key+' value:'+obj[key]);\r\n})//key:a value:1//key:b value:2//key:c value:3\r\n```\r\n\r\n使用Object.entries() :ES8\r\n\r\n```\r\nfor(let [key,value] of Object.entries(obj1)){\r\n        console.log(`key: ${key} value:${value}`)\r\n}//key:a value:1//key:b value:2//key:c value:3\r\n \r\n```\r\n\r\n### 4.String padding\r\n\r\n在ES8中String新增了两个实例函数`String.prototype.padStart`和`String.prototype.padEnd`，允许将空字符串或其他字符串添加到原始字符串的开头或结尾。\r\n\r\nString.padStart(targetLength,[padString])\r\n\r\n·   targetLength:当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。\r\n\r\n·   padString:(可选)填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 \" \"。\r\n\r\n```\r\nconsole.log('0.0'.padStart(4,'10')) //10.0console.log('0.0'.padStart(20))// 0.00    \r\n```\r\n\r\nString.padEnd(targetLength,padString])\r\n\r\n·   targetLength:当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。\r\n\r\n·   padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 \" \"；\r\n\r\n```\r\nconsole.log('0.0'.padEnd(4,'0')) //0.00    console.log('0.0'.padEnd(10,'0'))//0.00000000\r\n```\r\n\r\n### 5.函数参数列表结尾允许逗号\r\n\r\n主要作用是方便使用git进行多人协作开发时修改同一个函数减少不必要的行变更。\r\n\r\n### 6.Object.getOwnPropertyDescriptors()\r\n\r\n`Object.getOwnPropertyDescriptors()`函数用来获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象。\r\n\r\n函数原型：\r\n\r\n```\r\nObject.getOwnPropertyDescriptors(obj)\r\n```\r\n\r\n返回`obj`对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。\r\n\r\n```\r\nconst obj2 = {\r\n        name: 'Jine',\r\n        get age() { return '18' }\r\n};Object.getOwnPropertyDescriptors(obj2)\r\n// {//   age: {//     configurable: true,//     enumerable: true,//     get: function age(){}, //the getter function//     set: undefined//   },//   name: {//     configurable: true,//     enumerable: true,//        value:\"Jine\",//         writable:true//   }// }\r\n```\r\n\r\n### 7.SharedArrayBuffer对象\r\n\r\nSharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。\r\n\r\n```\r\n/**\r\n * \r\n * @param {*} length 所创建的数组缓冲区的大小，以字节(byte)为单位。  \r\n * @returns {SharedArrayBuffer} 一个大小指定的新 SharedArrayBuffer 对象。其内容被初始化为 0。\r\n */\r\nnew SharedArrayBuffer(length)\r\n```\r\n\r\n### 8.Atomics对象\r\n\r\nAtomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。\r\n\r\n这些原子操作属于 Atomics 模块。与一般的全局对象不同，Atomics 不是构造函数，因此不能使用 new 操作符调用，也不能将其当作函数直接调用。Atomics 的所有属性和方法都是静态的（与 Math 对象一样）。\r\n\r\n多个共享内存的线程能够同时读写同一位置上的数据。原子操作会确保正在读或写的数据的值是符合预期的，即下一个原子操作一定会在上一个原子操作结束后才会开始，其操作过程不会中断。\r\n\r\n·   Atomics.add()\r\n\r\n将指定位置上的数组元素与给定的值相加，并返回相加前该元素的值。\r\n\r\n·   Atomics.and()\r\n\r\n将指定位置上的数组元素与给定的值相与，并返回与操作前该元素的值。\r\n\r\n·   Atomics.compareExchange()\r\n\r\n如果数组中指定的元素与给定的值相等，则将其更新为新的值，并返回该元素原先的值。\r\n\r\n·   Atomics.exchange()\r\n\r\n将数组中指定的元素更新为给定的值，并返回该元素更新前的值。\r\n\r\n·   Atomics.load()\r\n\r\n返回数组中指定元素的值。\r\n\r\n·   Atomics.or()\r\n\r\n将指定位置上的数组元素与给定的值相或，并返回或操作前该元素的值。\r\n\r\n·   Atomics.store()\r\n\r\n将数组中指定的元素设置为给定的值，并返回该值。\r\n\r\n·   Atomics.sub()\r\n\r\n将指定位置上的数组元素与给定的值相减，并返回相减前该元素的值。\r\n\r\n·   Atomics.xor()\r\n\r\n将指定位置上的数组元素与给定的值相异或，并返回异或操作前该元素的值。\r\n\r\nwait() 和 wake() 方法采用的是 Linux 上的 futexes 模型（fast user-space mutex，快速用户空间互斥量），可以让进程一直等待直到某个特定的条件为真，主要用于实现阻塞。\r\n\r\n·   Atomics.wait()\r\n\r\n检测数组中某个指定位置上的值是否仍然是给定值，是则保持挂起直到被唤醒或超时。返回值为 \"ok\"、\"not-equal\" 或 \"time-out\"。调用时，如果当前线程不允许阻塞，则会抛出异常（大多数浏览器都不允许在主线程中调用 wait()）。\r\n\r\n·   Atomics.wake()\r\n\r\n唤醒等待队列中正在数组指定位置的元素上等待的线程。返回值为成功唤醒的线程数量。\r\n\r\n·   Atomics.isLockFree(size)\r\n\r\n可以用来检测当前系统是否支持硬件级的原子操作。对于指定大小的数组，如果当前系统支持硬件级的原子操作，则返回 true；否则就意味着对于该数组，Atomics 对象中的各原子操作都只能用锁来实现。此函数面向的是技术专家。-->\r\n\r\n## ES9新特性（2018）\r\n\r\n·     异步迭代\r\n\r\n·     Promise.finally()\r\n\r\n·     Rest/Spread 属性\r\n\r\n·     [正则表达式命名捕获组](https://link.juejin.im/?target=http://esnext.justjavac.com/proposal/regexp-named-groups.html)（Regular Expression Named Capture Groups）\r\n\r\n·     [正则表达式反向断言](https://link.juejin.im/?target=https://segmentfault.com/a/1190000006824133)（lookbehind）\r\n\r\n·     正则表达式dotAll模式\r\n\r\n·     [正则表达式 Unicode 转义](https://juejin.im/post/5b2a186cf265da596d04a648#heading-1)\r\n\r\n·     [非转义序列的模板字符串](https://juejin.im/post/5b2a186cf265da596d04a648#heading-1)\r\n\r\n### 1.异步迭代\r\n\r\n在`async/await`的某些时刻，你可能尝试在同步循环中调用异步函数。例如：\r\n\r\n```\r\nasync function process(array) {\r\n  for (let i of array) {\r\n    await doSomething(i);\r\n  }\r\n}\r\n```\r\n\r\n这段代码不会正常运行，下面这段同样也不会：\r\n\r\n```\r\nasync function process(array) {\r\n  array.forEach(async i => {\r\n    await doSomething(i);\r\n  });\r\n}\r\n```\r\n\r\n这段代码中，循环本身依旧保持同步，并在在内部异步函数之前全部调用完成。\r\n\r\nES2018引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了`next()`方法返回一个Promise。因此`await`可以和`for...of`循环一起使用，以串行的方式运行异步操作。例如：\r\n\r\n```\r\nasync function process(array) {\r\n  for await (let i of array) {\r\n    doSomething(i);\r\n  }\r\n}\r\n```\r\n\r\n### 2.Promise.finally()\r\n\r\n一个Promise调用链要么成功到达最后一个`.then()`，要么失败触发`.catch()`。在某些情况下，你想要在无论Promise运行成功还是失败，运行相同的代码，例如清除，删除对话，关闭数据库连接等。\r\n\r\n`.finally()`允许你指定最终的逻辑：\r\n\r\n```\r\nfunction doSomething() {\r\n  doSomething1()\r\n  .then(doSomething2)\r\n  .then(doSomething3)\r\n  .catch(err => {\r\n    console.log(err);\r\n  })\r\n  .finally(() => {\r\n    // finish here!\r\n  });\r\n}\r\n```\r\n\r\n### 3.Rest/Spread 属性\r\n\r\nES2015引入了[Rest参数](https://link.juejin.im/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters)和[扩展运算符](https://link.juejin.im/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax)。三个点（...）仅用于数组。Rest参数语法允许我们将一个不定数量的参数表示为一个数组。\r\n\r\n```\r\nrestParam(1, 2, 3, 4, 5);\r\nfunction restParam(p1, p2, ...p3) {\r\n  // p1 = 1\r\n  // p2 = 2\r\n  // p3 = [3, 4, 5]\r\n}\r\n```\r\n\r\n展开操作符以相反的方式工作，将数组转换成可传递给函数的单独参数。例如`Math.max()`返回给定数字中的最大值：\r\n\r\n```\r\nconst values = [99, 100, -1, 48, 16];\r\nconsole.log( Math.max(...values) ); // 100\r\n```\r\n\r\nES2018为对象解构提供了和数组一样的Rest参数（）和展开操作符，一个简单的例子：\r\n\r\n```\r\nconst myObject = {\r\n  a: 1,\r\n  b: 2,\r\n  c: 3\r\n};\r\nconst { a, ...x } = myObject;// a = 1// x = { b: 2, c: 3 }\r\n```\r\n\r\n或者你可以使用它给函数传递参数：\r\n\r\n```\r\nrestParam({\r\n  a: 1,\r\n  b: 2,\r\n  c: 3\r\n});\r\nfunction restParam({ a, ...x }) {\r\n  // a = 1\r\n  // x = { b: 2, c: 3 }\r\n}\r\n```\r\n\r\n跟数组一样，Rest参数只能在声明的结尾处使用。此外，它只适用于每个对象的顶层，如果对象中嵌套对象则无法适用。\r\n\r\n扩展运算符可以在其他对象内使用，例如：\r\n\r\n```\r\nconst obj1 = { a: 1, b: 2, c: 3 };const obj2 = { ...obj1, z: 26 };// obj2 is { a: 1, b: 2, c: 3, z: 26 }\r\n```\r\n\r\n可以使用扩展运算符拷贝一个对象，像是这样`obj2 = {...obj1}`，但是 **这只是一个对象的浅拷贝**。另外，如果一个对象A的属性是对象B，那么在克隆后的对象cloneB中，该属性指向对象B。\r\n\r\n### 4.正则表达式命名捕获组\r\n\r\nJavaScript正则表达式可以返回一个匹配的对象——一个包含匹配字符串的类数组，例如：以`YYYY-MM-DD`的格式解析日期：\r\n\r\n```\r\nconst\r\n  reDate = /([0-9]{4})-([0-9]{2})-([0-9]{2})/,\r\n  match  = reDate.exec('2018-04-30'),\r\n  year   = match[1], // 2018\r\n  month  = match[2], // 04\r\n  day    = match[3]; // 30\r\n```\r\n\r\n这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。\r\n\r\nES2018允许命名捕获组使用符号`?<name>`，在打开捕获括号`(`后立即命名，示例如下：\r\n\r\n```\r\nconst\r\n  reDate = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/,\r\n  match  = reDate.exec('2018-04-30'),\r\n  year   = match.groups.year,  // 2018\r\n  month  = match.groups.month, // 04\r\n  day    = match.groups.day;   // 30\r\n```\r\n\r\n任何匹配失败的命名组都将返回`undefined`。\r\n\r\n命名捕获也可以使用在`replace()`方法中。例如将日期转换为美国的 MM-DD-YYYY 格式：\r\n\r\n```\r\nconst\r\n  reDate = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/,\r\n  d      = '2018-04-30',\r\n  usDate = d.replace(reDate, '$<month>-$<day>-$<year>');\r\n```\r\n\r\n### 5.正则表达式反向断言\r\n\r\n目前JavaScript在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：\r\n\r\n```\r\nconst\r\n  reLookahead = /\\D(?=\\d+)/,\r\n  match       = reLookahead.exec('$123.89');\r\nconsole.log( match[0] ); // $\r\n```\r\n\r\nES2018引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：\r\n\r\n```\r\nconst\r\n  reLookbehind = /(?<=\\D)\\d+/,\r\n  match        = reLookbehind.exec('$123.89');\r\nconsole.log( match[0] ); // 123.89\r\n```\r\n\r\n以上是 **肯定反向断言**，非数字`\\D`必须存在。同样的，还存在 **否定反向断言**，表示一个值必须不存在，例如：\r\n\r\n```\r\nconst\r\n  reLookbehindNeg = /(?<!\\D)\\d+/,\r\n  match           = reLookbehind.exec('$123.89');\r\nconsole.log( match[0] ); // null\r\n```\r\n\r\n### 6.正则表达式dotAll模式\r\n\r\n正则表达式中点`.`匹配除回车外的任何单字符，标记`s`改变这种行为，允许行终止符的出现，例如：\r\n\r\n```\r\n/hello.world/.test('hello\\nworld');  // false\r\n/hello.world/s.test('hello\\nworld'); // true\r\n```\r\n\r\n### 7.正则表达式 Unicode 转义\r\n\r\n到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018添加了 Unicode 属性转义——形式为`\\p{...}`和`\\P{...}`，在正则表达式中使用标记 `u` (unicode) 设置，在`\\p`块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：\r\n\r\n```\r\nconst reGreekSymbol = /\\p{Script=Greek}/u;\r\nreGreekSymbol.test('π'); // true\r\n```\r\n\r\n此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。\r\n\r\n### 8.非转义序列的模板字符串\r\n\r\n之前，`\\u`开始一个 unicode 转义，`\\x`开始一个十六进制转义，`\\`后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如Windows文件路径 `C:\\uuu\\xxx\\111`。更多细节参考[模板字符串](https://link.juejin.im/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings)。\r\n\r\n## ES10新特性（2019）\r\n\r\n·     行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配\r\n\r\n·     更加友好的 JSON.stringify\r\n\r\n·     新增了Array的`flat()`方法和`flatMap()`方法\r\n\r\n·     新增了String的`trimStart()`方法和`trimEnd()`方法\r\n\r\n·     `Object.fromEntries()`\r\n\r\n·     `Symbol.prototype.description`\r\n\r\n·     `String.prototype.matchAll`\r\n\r\n·     `Function.prototype.toString()`现在返回精确字符，包括空格和注释\r\n\r\n·     简化`try {} catch {}`,修改 `catch` 绑定\r\n\r\n·     新的基本数据类型`BigInt`\r\n\r\n·     globalThis\r\n\r\n·     import()\r\n\r\n·     Legacy RegEx\r\n\r\n·     私有的实例方法和访问器\r\n\r\n### 1.行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配\r\n\r\n以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致SyntaxError异常。\r\n\r\n### 2.更加友好的 JSON.stringify\r\n\r\n如果输入 Unicode 格式但是超出范围的字符，在原先JSON.stringify返回格式错误的Unicode字符串。现在实现了一个改变JSON.stringify的[第3阶段提案](https://link.juejin.im/?target=https://github.com/tc39/proposal-well-formed-stringify)，因此它为其输出转义序列，使其成为有效Unicode（并以UTF-8表示）\r\n\r\n### 3.新增了Array的`flat()`方法和`flatMap()`方法\r\n\r\n`flat()`和`flatMap()`本质上就是是归纳（reduce） 与 合并（concat）的操作。\r\n\r\n#### Array.prototype.flat()\r\n\r\n`flat()` 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。\r\n\r\n·     `flat()`方法最基本的作用就是数组降维\r\n\r\n```\r\nvar arr1 = [1, 2, [3, 4]];\r\narr1.flat(); // [1, 2, 3, 4]\r\nvar arr2 = [1, 2, [3, 4, [5, 6]]];\r\narr2.flat();// [1, 2, 3, 4, [5, 6]]\r\nvar arr3 = [1, 2, [3, 4, [5, 6]]];\r\narr3.flat(2);// [1, 2, 3, 4, 5, 6]\r\n//使用 Infinity 作为深度，展开任意深度的嵌套数组\r\narr3.flat(Infinity); // [1, 2, 3, 4, 5, 6]\r\n```\r\n\r\n·     其次，还可以利用`flat()`方法的特性来去除数组的空项\r\n\r\n```\r\nvar arr4 = [1, 2, , 4, 5];\r\narr4.flat();// [1, 2, 4, 5]\r\n```\r\n\r\n#### Array.prototype.flatMap()\r\n\r\n`flatMap()` 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。 这里我们拿map方法与flatMap方法做一个比较。\r\n\r\n```\r\nvar arr1 = [1, 2, 3, 4];\r\n \r\narr1.map(x => [x * 2]); // [[2], [4], [6], [8]]\r\n \r\narr1.flatMap(x => [x * 2]);// [2, 4, 6, 8]\r\n// 只会将 flatMap 中的函数返回的数组 “压平” 一层\r\narr1.flatMap(x => [[x * 2]]);// [[2], [4], [6], [8]]\r\n```\r\n\r\n### 4.新增了String的`trimStart()`方法和`trimEnd()`方法\r\n\r\n新增的这两个方法很好理解，分别去除字符串首尾空白字符，这里就不用例子说声明了。\r\n\r\n### 5.`Object.fromEntries()`\r\n\r\n`Object.entries()`方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。\r\n\r\n**而**`Object.fromEntries()` **则是** `Object.entries()` **的反转。**\r\n\r\n`Object.fromEntries()` 函数传入一个键值对的列表，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现@iterator方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。\r\n\r\n·     通过 Object.fromEntries， 可以将 Map 转化为 Object:\r\n\r\n```\r\nconst map = new Map([ ['foo', 'bar'], ['baz', 42] ]);const obj = Object.fromEntries(map);console.log(obj); // { foo: \"bar\", baz: 42 }\r\n```\r\n\r\n·     通过 Object.fromEntries， 可以将 Array 转化为 Object:\r\n\r\n```\r\nconst arr = [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ];const obj = Object.fromEntries(arr);console.log(obj); // { 0: \"a\", 1: \"b\", 2: \"c\" }\r\n```\r\n\r\n### 6.`Symbol.prototype.description`\r\n\r\n通过工厂函数Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：\r\n\r\n```\r\nconst sym = Symbol('The description');\r\n```\r\n\r\n以前，访问描述的唯一方法是将符号转换为字符串：\r\n\r\n```\r\nassert.equal(String(sym), 'Symbol(The description)');\r\n```\r\n\r\n现在引入了getter Symbol.prototype.description以直接访问描述：\r\n\r\n```\r\nassert.equal(sym.description, 'The description');\r\n```\r\n\r\n### 7.`String.prototype.matchAll`\r\n\r\n`matchAll()` 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。 在 matchAll 出现之前，通过在循环中调用regexp.exec来获取所有匹配项信息（regexp需使用/g标志：\r\n\r\n```\r\nconst regexp = RegExp('foo*','g');const str = 'table football, foosball';\r\nwhile ((matches = regexp.exec(str)) !== null) {\r\n  console.log(`Found ${matches[0]}. Next starts at ${regexp.lastIndex}.`);\r\n  // expected output: \"Found foo. Next starts at 9.\"\r\n  // expected output: \"Found foo. Next starts at 19.\"\r\n}\r\n```\r\n\r\n如果使用matchAll ，就可以不必使用while循环加exec方式（且正则表达式需使用／g标志）。使用matchAll 会得到一个迭代器的返回值，配合 for...of, array spread, or Array.from() 可以更方便实现功能：\r\n\r\n```\r\nconst regexp = RegExp('foo*','g'); const str = 'table football, foosball';let matches = str.matchAll(regexp);\r\nfor (const match of matches) {\r\n  console.log(match);\r\n}// Array [ \"foo\" ]// Array [ \"foo\" ]\r\n// matches iterator is exhausted after the for..of iteration// Call matchAll again to create a new iterator\r\nmatches = str.matchAll(regexp);\r\nArray.from(matches, m => m[0]);// Array [ \"foo\", \"foo\" ]\r\n```\r\n\r\n#### matchAll可以更好的用于分组\r\n\r\n```\r\nvar regexp = /t(e)(st(\\d?))/g;var str = 'test1test2';\r\n \r\nstr.match(regexp); // Array ['test1', 'test2']\r\nlet array = [...str.matchAll(regexp)];\r\n \r\narray[0];// ['test1', 'e', 'st1', '1', index: 0, input: 'test1test2', length: 4]\r\narray[1];// ['test2', 'e', 'st2', '2', index: 5, input: 'test1test2', length: 4]\r\n```\r\n\r\n### 8.`Function.prototype.toString()`现在返回精确字符，包括空格和注释\r\n\r\n```\r\nfunction /* comment */ foo /* another comment */() {}\r\n// 之前不会打印注释部分console.log(foo.toString()); // function foo(){}\r\n// ES2019 会把注释一同打印console.log(foo.toString()); // function /* comment */ foo /* another comment */ (){}\r\n// 箭头函数const bar /* comment */ = /* another comment */ () => {};\r\nconsole.log(bar.toString()); // () => {}\r\n```\r\n\r\n### 9.修改 `catch` 绑定\r\n\r\n在 ES10 之前，我们必须通过语法为 catch 子句绑定异常变量，无论是否有必要。很多时候 catch 块是多余的。 ES10 提案使我们能够简单的把变量省略掉。\r\n\r\n不算大的改动。\r\n\r\n之前是\r\n\r\n```\r\ntry {} catch(e) {}\r\n```\r\n\r\n现在是\r\n\r\n```\r\ntry {} catch {}\r\n```\r\n\r\n### 10.新的基本数据类型`BigInt`\r\n\r\n现在的基本数据类型（值类型）不止5种（ES6之后是六种）了哦！加上BigInt一共有七种基本数据类型，分别是： String、Number、Boolean、Null、Undefined、Symbol、BigInt\r\n\r\n ",
      "data": {
        "title": "ES6、ES7、ES8、ES9、ES10新特性一览",
        "date": "2021-02-05 18:05:41",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "es6es7es8es9es10-xin-te-xing-yi-lan"
    },
    {
      "content": "javaScript是一门单线程语言就是运用EventLoop 来决定事物运行的顺序的顺序.\r\njs执行代码分为同步和异步,进程会优先执行同步代码,之后轮询任务队列,但当异步代码执行完后会优先执行同步代码,再次轮询任务队列,直至所有任务都执行完成.\r\n**使用异步的好处是你只需要设置好异步的触发条件就可以去干别的事情了，所以异步不会阻塞主干上事件的执行。特别是对于JS这种只有一个线程的语言，如果都像我们第一个例子那样去while(true)，那浏览器就只有一直卡死了，只有等这个循环运行完才会有响应。**\r\n![](https://webopener.github.io/post-images/1612520265363.bmp)",
      "data": {
        "title": "javaScript EventLoop 运行顺序",
        "date": "2021-02-05 17:39:38",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "javascript-eventloop-yun-xing-shun-xu"
    },
    {
      "content": "> 欢迎来到我的小站呀，很高兴遇见你！🤝\n\n## 🏠 关于本站\n\n## 👨‍💻 博主是谁\n\n## ⛹ 兴趣爱好\n\n## 📬 联系我呀\n",
      "data": {
        "title": "关于",
        "date": "2019-01-25 19:09:48",
        "tags": null,
        "published": true,
        "hideInList": true,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    }
  ],
  "tags": [
    {
      "index": 0,
      "name": "前端攻城狮",
      "slug": "yTqRDQyRH",
      "used": false
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}